{"version":3,"sources":["pictures/shoe.jpg","components/NavBar.js","components/Intro.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","componentDidMount","prevScrollpos","window","pageYOffset","onscroll","currentScrollPos","document","getElementById","style","top","Navbar","id","expand","Toggle","aria-controls","Collapse","Nav","className","Link","href","Component","Intro","Image","src","require","rounded","App","Boolean","location","hostname","match","ReactDOM","render","Fragment","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAAAA,EAAOC,QAAU,IAA0B,kC,6JCItBC,E,4MAEjBC,kBAAoB,WAEhB,IAAIC,EAAgBC,OAAOC,YAC3BD,OAAOE,SAAW,WACd,IAAIC,EAAmBH,OAAOC,YAI1BG,SAASC,eAAe,UAAUC,MAAMC,IADnB,IAArBJ,GAGKJ,EAAgBI,EAFyB,IAMA,SAElDJ,EAAgBI,I,uDAKpB,OACI,6BACI,kBAACK,EAAA,EAAD,CAAQC,GAAG,SAASC,OAAO,MACvB,kBAACF,EAAA,EAAOG,OAAR,CAAeF,GAAG,YAAYG,gBAAc,qBAC5C,kBAACJ,EAAA,EAAOK,SAAR,CAAiBJ,GAAG,oBAChB,kBAACK,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,IAAf,QACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,aAAf,aACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,aAAf,UACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,SACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,SAAf,mB,GAjCQC,a,QCAfC,E,uKAEb,OACI,6BACI,kBAACC,EAAA,EAAD,CAAOL,UAAU,YAAYM,IAAKC,EAAQ,IAAyBC,SAAO,IAE1E,yBAAKR,UAAU,gBACX,uBAAGN,GAAG,SAAN,cACA,wBAAIA,GAAG,SAAP,iBACA,uBAAGA,GAAG,SAAN,+B,GATeS,aCqCpBM,E,uKAxBX,OACE,yBAAKT,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKA,UAAU,OAAON,GAAG,YACvB,yCACA,sFACA,uBAAGQ,KAAK,aAAR,gDACA,qGAGF,yBAAKF,UAAU,OAAON,GAAG,YACvB,yCACA,uBAAGQ,KAAK,aAAR,sD,GAlBQC,aCFEO,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.904022b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/shoe.d2290058.jpg\";","import React, { Component } from 'react'\n\nimport { Navbar, Nav } from 'react-bootstrap';\n\nexport default class NavBar extends Component {\n\n    componentDidMount = () => {\n\n        let prevScrollpos = window.pageYOffset;\n        window.onscroll = () => {\n            let currentScrollPos = window.pageYOffset;\n\n            //to show navbar on mobile on top\n            if (currentScrollPos === 0)\n                document.getElementById(\"navbar\").style.top = \"0\";\n\n            else if (prevScrollpos > currentScrollPos)\n                document.getElementById(\"navbar\").style.top = \"0\";\n\n            else\n                document.getElementById(\"navbar\").style.top = \"-800px\";\n\n            prevScrollpos = currentScrollPos;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar id=\"navbar\" expand=\"lg\">\n                    <Navbar.Toggle id=\"navToggle\" aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mx-auto\">\n                            <Nav.Link href=\"\">Home</Nav.Link>\n                            <Nav.Link href=\"#section1\">Portfolio</Nav.Link>\n                            <Nav.Link href=\"#section2\">Resume</Nav.Link>\n                            <Nav.Link href=\"#link\">About</Nav.Link>\n                            <Nav.Link href=\"#link\">Contact</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar >\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport { Image } from 'react-bootstrap';\n\nexport default class Intro extends Component {\n    render() {\n        return (\n            <div>\n                <Image className=\"img-style\" src={require(`../pictures/shoe.jpg`)} rounded />\n\n                <div className=\"caption head\">\n                    <p id=\"text1\">Hello, I'm</p>\n                    <h1 id=\"text2\">Tomer Steiner</h1>\n                    <p id=\"text3\">and this is my resume</p>\n                </div>\n            </div >\n        )\n    }\n}\n","import React, { Component } from 'react';\n\n/* eslint-disable */\nimport zenscroll from 'zenscroll';\n/* eslint-enabled */\n\nimport './App.css';\nimport './styles/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavBar from './components/NavBar.js';\nimport Intro from './components/Intro.js';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <NavBar />\n        <Intro/>\n\n        <div className=\"main\" id=\"section1\">\n          <h2>Section 1</h2>\n          <p>Click on the link to see the \"smooth\" scrolling effect.</p>\n          <a href=\"#section2\">Click Me to Smooth Scroll to Section 2 Below</a>\n          <p>Note: Remove the scroll-behavior property to remove smooth scrolling.</p>\n        </div>\n\n        <div className=\"main\" id=\"section2\">\n          <h2>Section 2</h2>\n          <a href=\"#section1\">Click Me to Smooth Scroll to Section 1 Above</a>\n        </div>\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}